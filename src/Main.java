import java.io.File;
import java.io.FileNotFoundException;
import java.time.LocalDate;
import java.time.Year;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;


public class Main {
    Tr√¶ner crawlTr√¶ner;
    Tr√¶ner brystsv√∏mningTr√¶ner;
    Tr√¶ner butterflyTr√¶ner;
    Scanner scanner = new Scanner(System.in);
    private ArrayList<Medlem> motionistMedlemmer = new ArrayList<>();
    private ArrayList<Medlem> konkurrenceMedlemmer = new ArrayList<>();
    Betaling betaling = new Betaling();
    Konkurrencesv√∏mmer konkurrencesv√∏mmer = new Konkurrencesv√∏mmer();
    Medlem medlem = new Medlem();
    Filer filer = new Filer();

    public static void main(String[] args) {
        new Main().run();
    }

    private void run() {
        motionistMedlemmer = filer.indl√¶sMotionisterFraFil("MotionistSv√∏mmere.txt");
        konkurrenceMedlemmer = filer.indl√¶sKonkurrenceMedlemmerFraFil("KonkurrenceSv√∏mmere.txt");
        boolean k√∏rProgram = true;
        Menu menu = new Menu("** Menu **", "V√¶lg en mulighed:", new String[]{
                "1. Formand",
                "2. Tr√¶ner",
                "3. Kass√©r"
        });

        while (k√∏rProgram) {
            menu.printMenu();
            int brugervalg = menu.brugerensValg();

            switch (brugervalg) {
                case 1:
                    boolean k√∏rProgram1 = true;
                    Menu formandMenu = new Menu("** FORMAND **", "V√¶lg en mulighed: ", new String[]{
                            "1. Opret medlem",
                            "2. Se medlemmer",
                            "3. G√• tilbage til hoved-menuen"
                    });

                    while (k√∏rProgram1) {
                        formandMenu.printMenu();
                        int brugervalg1 = formandMenu.brugerensValg();
                        switch (brugervalg1) {
                            case 1:
                                opretMedlem();
                                break;
                            case 2:
                                seMedlemmer();
                                break;
                            case 3:
                                k√∏rProgram1 = false;
                                break;
                        }
                    }
                    break;
                case 2:
                    boolean k√∏rProgram2 = true;
                    Menu tr√¶nerMenu = new Menu("* TR√ÜNER *", "V√¶lg en mulighed: ", new String[]{
                            "1. Opret en konkurrencesv√∏mmers st√¶vne",
                            "2. Se fem bedste sv√∏mmere",
                            "3. Opdater konkurrencesv√∏mmers bedste tid",
                            "4. G√• tilbage til hoved-menuen"
                    });

                    while (k√∏rProgram2) {
                        tr√¶nerMenu.printMenu();
                        int brugervalg2 = tr√¶nerMenu.brugerensValg();
                        switch (brugervalg2) {
                            case 1:
                                opretSt√¶vneTilEnKonkurrencesv√∏mmer();
                                break;
                            case 2:
                                boolean k√∏rProgram25 = true;
                                Menu top5Menu = new Menu("* TOP 5 SV√òMMERE *", "V√¶lg en mulighed: ", new String[]{ //NY TARA TODO
                                        "1. Se top 5 indenfor crawl",
                                        "2. Se top 5 indenfor brystsv√∏mning",
                                        "3. Se top 5 indenfor butterfly",
                                        "4. G√• tilbage til tr√¶ner-menuen"
                                });
                                while (k√∏rProgram25) {
                                    top5Menu.printMenu();
                                    int brugervalg25 = top5Menu.brugerensValg();
                                    switch (brugervalg25){
                                        case 1:
                                            seTop5Crawl();
                                            seOgSorterKonkurrencesv√∏mmere();
                                            break;
                                        case 2:
                                            seTop5Brystsv√∏mning();
                                            break;
                                        case 3:
                                            seTop5Butterfly();
                                            break;
                                        case 4:
                                            k√∏rProgram25 = false;

                                    }
                                }
                                break;

                            case 3:
                                System.out.println("Indtast sv√∏mmerens fulde navn: "); // ny mulighed
                                String fullName = scanner.nextLine();
                                opdaterSv√∏mmersBedsteTid(fullName);
                                break;

                            case 4:
                                k√∏rProgram2 = false;
                                break;
                        }
                    }
                    break;
                case 3:
                    boolean k√∏rProgram3 = true;
                    Menu kasserMenu = new Menu("** KASSER **", "V√¶lg en mulighed: ", new String[]{
                            "1. Oversigt over medlemmer som har betalt kontingent",
                            "2. Oversigt over medlemmer som er i restance.",
                            "3. G√• tilbage til hoved-menuen"


                    });

                    while (k√∏rProgram3) {
                        kasserMenu.printMenu();
                        int brugervalg3 = kasserMenu.brugerensValg();
                        switch (brugervalg3) {
                            case 1:
                                seMedlemmerBetalt();
                                break;
                            case 2:
                                seMedlemmerRestance();
                                break;
                            case 3:
                                k√∏rProgram3 = false;
                                break;
                        }
                    }
                    break;
                default:
                    System.out.println("Dette er ikke en mulighed. Pr√∏v igen üôÇ");

            }
        }
    }


    private void seOgSorterKonkurrencesv√∏mmere() {
        List<Konkurrencesv√∏mmer> crawlJuniorSv√∏mmere = new ArrayList<>();
        List<Konkurrencesv√∏mmer> crawlSeniorSv√∏mmere = new ArrayList<>();
        List<Konkurrencesv√∏mmer> brystJuniorSv√∏mmere = new ArrayList<>();
        List<Konkurrencesv√∏mmer> brystSeniorSv√∏mmere = new ArrayList<>();
        List<Konkurrencesv√∏mmer> butterFlyJuniorSv√∏mmere = new ArrayList<>();
        List<Konkurrencesv√∏mmer> butterFlySeniorSv√∏mmere = new ArrayList<>();

        for (Medlem medlem : konkurrenceMedlemmer) {
            if (medlem instanceof Konkurrencesv√∏mmer) {
                Konkurrencesv√∏mmer sv√∏mmer = ((Konkurrencesv√∏mmer) medlem);
                if (sv√∏mmer.getBedsteTid() != 0) { // lille tilf√∏jelse
                    if ("Crawl".equalsIgnoreCase(sv√∏mmer.getSv√∏mmedisciplin())) {
                        if (sv√∏mmer.erJunior()) {
                            crawlJuniorSv√∏mmere.add(sv√∏mmer);
                        } else {
                            crawlSeniorSv√∏mmere.add(sv√∏mmer);
                        }
                    } else if ("BrystSv√∏mning".equalsIgnoreCase(sv√∏mmer.getSv√∏mmedisciplin())) {
                        if (sv√∏mmer.erJunior()) {
                            brystJuniorSv√∏mmere.add(sv√∏mmer);
                        } else {
                            brystSeniorSv√∏mmere.add(sv√∏mmer);
                        }
                    } else if ("Butterfly".equalsIgnoreCase(sv√∏mmer.getSv√∏mmedisciplin())) {
                        if (sv√∏mmer.erJunior()) {
                            butterFlyJuniorSv√∏mmere.add(sv√∏mmer);
                        } else {
                            butterFlySeniorSv√∏mmere.add(sv√∏mmer);

                        }
                    }
                }
            }
        }
        Collections.sort(crawlJuniorSv√∏mmere, new Konkurrencesv√∏mmerBedsteTidComparator());
        Collections.sort(crawlSeniorSv√∏mmere, new Konkurrencesv√∏mmerBedsteTidComparator());
        Collections.sort(brystJuniorSv√∏mmere, new Konkurrencesv√∏mmerBedsteTidComparator());
        Collections.sort(brystSeniorSv√∏mmere, new Konkurrencesv√∏mmerBedsteTidComparator());
        Collections.sort(butterFlyJuniorSv√∏mmere, new Konkurrencesv√∏mmerBedsteTidComparator());
        Collections.sort(butterFlySeniorSv√∏mmere, new Konkurrencesv√∏mmerBedsteTidComparator());

        System.out.println("\nTop 5 i Crawl(Junior):");
        visTop5(crawlJuniorSv√∏mmere);
        System.out.println("\nTop 5 i Crawl (Senior)");
        visTop5(crawlSeniorSv√∏mmere);
        System.out.println("\nTop 5 i Brystsv√∏mning(Junior");
        visTop5(brystJuniorSv√∏mmere);
        System.out.println("\nTop 5 i Brystsv√∏mning(Senior)");
        visTop5(brystSeniorSv√∏mmere);
        System.out.println("\nTop 5 i Butterfly(Junior)");
        visTop5(butterFlyJuniorSv√∏mmere);
        System.out.println("\nTop 5 i Butterfly(Senior");
        visTop5(butterFlySeniorSv√∏mmere);
    }

    private void visTop5(List<Konkurrencesv√∏mmer> sv√∏mmere) {
        int topN = Math.min(5, sv√∏mmere.size());
        List<Konkurrencesv√∏mmer> top5Sv√∏mmere = sv√∏mmere.subList(0, topN);

        for (Konkurrencesv√∏mmer sv√∏mmer : top5Sv√∏mmere) {
            System.out.println(sv√∏mmer.getNavn() + "-" + sv√∏mmer.getSv√∏mmedisciplin() + "-Tid:" + sv√∏mmer.getBedsteTid()
                    + "-Status:" + sv√∏mmer.erJunior());
        }
    }


    public Tr√¶ner hvilkenTr√¶nerSkalMedlemmetHave(Konkurrencesv√∏mmer medlem) {
        if (medlem.getSv√∏mmedisciplin().equalsIgnoreCase("crawl")) {
            medlem.setTr√¶ner(crawlTr√¶ner);
            return crawlTr√¶ner;
        }
        if (medlem.getSv√∏mmedisciplin().equalsIgnoreCase("brystsv√∏mning")) {
            medlem.setTr√¶ner(brystsv√∏mningTr√¶ner);
            return brystsv√∏mningTr√¶ner;
        }
        if (medlem.getSv√∏mmedisciplin().equalsIgnoreCase("butterfly")) {
            medlem.setTr√¶ner(butterflyTr√¶ner);
            return butterflyTr√¶ner;
        }
        return null;
    }

    public void opretTr√¶nere() {
        crawlTr√¶ner = new Tr√¶ner("Jamie");
        brystsv√∏mningTr√¶ner = new Tr√¶ner("The Rock");
        butterflyTr√¶ner = new Tr√¶ner("David Hasselhoff");
    }

    public void opretSt√¶vneTilEnKonkurrencesv√∏mmer() { // NYE LINJER HER
        System.out.println("* OPRET ST√ÜVNE *");
        System.out.println("Indtast det medlem der har v√¶ret til st√¶vne's fulde navn: ");
        String fuldeNavn = scanner.nextLine();

        Konkurrencesv√∏mmer konkurrencesv√∏mmer = findMedlemUdFraFuldtNavn(fuldeNavn);

        if (konkurrencesv√∏mmer == null) {
            System.out.println("Konkurrenten med navnet " + fuldeNavn + " kan ikke findes blandt medlemmer.");
            return;
        }

        System.out.println("Indtast st√¶vne-navn: ");
        String st√¶vneNavn = scanner.nextLine();

        double tid = 0;
        boolean validtInput = false;

        do {
            try {
                System.out.println("Indtast tid: (mm,ss)");
                tid = indtastGyldigTid();
                validtInput = true;
            } catch (InputMismatchException e) {
                System.out.println("Ugyldigt svar. Pr√∏v igen.");
            }
        } while (!validtInput);

        int placering = 0;

        do {
            validtInput = false;
            try {
                System.out.println("Indtast din placering: ");
                placering = scanner.nextInt();
                scanner.nextLine();
                validtInput = true;
            } catch (InputMismatchException e) {
                System.out.println("Ugyldigt svar. Pr√∏v igen.");
                scanner.nextLine();
            }
        } while (!validtInput);

        //St√¶vne nytSt√¶vne = new St√¶vne(st√¶vneNavn, tid, placering); // LAVEDE FEJL I COMPILER
        //konkurrencesv√∏mmer.tilf√∏jSt√¶vne(nytSt√¶vne); // LAVEDE FEJL I COMPILER

        konkurrencesv√∏mmer.setSt√¶vneNavn(st√¶vneNavn); // TILF√òJET
        konkurrencesv√∏mmer.setSt√¶vneTid(tid);  // TILF√òJET
        konkurrencesv√∏mmer.setSt√¶vnePlacering(placering);  // TILF√òJET
        filer.gemKonkurrenceTilFil(konkurrenceMedlemmer, "KonkurrenceSv√∏mmere.txt");
        System.out.println("Navn: " + konkurrencesv√∏mmer.getNavn() + ", st√¶vne: " + st√¶vneNavn + ", tid: " + tid + ", placering: " + placering);
        //System.out.println("St√¶vne tilf√∏jet til medlemmet: " + fuldeNavn + "\n" + nytSt√¶vne); / LAVEDE FEJL I COMPILER


    }

    private Konkurrencesv√∏mmer findMedlemUdFraFuldtNavn(String fuldeNavn) {
        for (Medlem medlem : konkurrenceMedlemmer) { // √ÜNDRET TIL DEN RIGTIGE LISTE
            if (medlem instanceof Konkurrencesv√∏mmer && medlem.getNavn().equalsIgnoreCase(fuldeNavn)) {
                System.out.println("Medlem fundet!");
                return (Konkurrencesv√∏mmer) medlem;
            }
        }
        System.out.println("Medlem ikke fundet.");
        return null;
    }

    public void opdaterSv√∏mmersBedsteTid(String fuldeNavn) { // LIGE SAT IND
        boolean blevMedlemFundet = false;
        for (int i = 0; i < konkurrenceMedlemmer.size(); i++) {
            if (konkurrenceMedlemmer.get(i) instanceof Konkurrencesv√∏mmer && konkurrenceMedlemmer.get(i).getNavn().equalsIgnoreCase(fuldeNavn)) {
                System.out.println("Medlem fundet!");
                System.out.println("Indtast " + fuldeNavn + "'s nye tid: ");
                double nyTid = scanner.nextDouble();
                scanner.nextLine();
                if (nyTid < ((Konkurrencesv√∏mmer) konkurrenceMedlemmer.get(i)).getBedsteTid() || ((Konkurrencesv√∏mmer) konkurrenceMedlemmer.get(i)).getBedsteTid() == 0) {
                    ((Konkurrencesv√∏mmer) konkurrenceMedlemmer.get(i)).setBedsteTid(nyTid);
                    filer.gemKonkurrenceTilFil(konkurrenceMedlemmer, "KonkurrenceSv√∏mmere.txt");
                } else {
                    System.out.println(fuldeNavn + "'s gamle tid var hurtigere end " + nyTid);
                }
                System.out.print("Navn: " + konkurrenceMedlemmer.get(i).getNavn());
                System.out.print(", Bedste tid: " + ((Konkurrencesv√∏mmer) konkurrenceMedlemmer.get(i)).getBedsteTid());
                System.out.print("min, Dato: " + ((Konkurrencesv√∏mmer) konkurrenceMedlemmer.get(i)).getDato());
                blevMedlemFundet = true;
            }
        }

        if (!blevMedlemFundet) {
            System.out.println(fuldeNavn + " blev ikke fundet");
        }

    }



    public void opretMedlem() { // NYE LINJER HER
        System.out.println("* OPRET NYT MEDLEM *");
        System.out.println("Indtast fulde navn:");
        String navn = scanner.nextLine();

        int f√∏dsels√•r = 0;
        boolean gyldigtF√∏dsels√•r = false;

        while (!gyldigtF√∏dsels√•r) { // NY while-l√∏kke, for at finde ud af om f√∏dsels√•ret er validt!
            try {
                System.out.println("Indtast f√∏dsels√•r: (YYYY)");
                f√∏dsels√•r = scanner.nextInt();
                scanner.nextLine();

                if (erF√∏dsels√•retValidt(f√∏dsels√•r)) {
                    gyldigtF√∏dsels√•r = true;
                } else {
                    System.out.println("Ugyldigt f√∏dsels√•r. Indtast et gyldigt √•r, eller kontakt personalet for sp√∏rgsm√•l."); // hehe er jeg ikke sjov
                }
            } catch (InputMismatchException e) {
                System.out.println("Indtast et √•rstal. Pr√∏v igen.");
                scanner.nextLine();
                f√∏dsels√•r = 0;
            }
        }

        String aktivEllerPassivSomOrd = aktivEllerPassivSomOrd();
        String erKontingentBetaltSomOrd = erKontingentBetaltSomOrd();
        String motionistEllerKonkurrenceSomOrd = motionistEllerKonkurrenceSomOrd();

        Medlem nytMedlem = new Medlem(navn, f√∏dsels√•r, aktivEllerPassivSomOrd, erKontingentBetaltSomOrd, motionistEllerKonkurrenceSomOrd);

        nytMedlem.setErKontingentBetalt(erKontingentBetaltSomOrd(nytMedlem)); // NY LINJE


        if (nytMedlem.getMotionistEllerKonkurrence().equalsIgnoreCase("konkurrence")) {
            opretKonkurrenceSv√∏mmer(nytMedlem);
        } else {
            motionistMedlemmer.add(nytMedlem);
            System.out.println("Medlem oprettet: " + nytMedlem);
            filer.gemMotionisterTilFil(motionistMedlemmer, "motionistsv√∏mmere.txt");

        }
    }

    public boolean erF√∏dsels√•retValidt(int √•r) { // NY METODE
        int aktuelt√Ör = Year.now().getValue();
        return √•r >= aktuelt√Ör - 100 && √•r <= aktuelt√Ör - 1;
    }


    public void opretKonkurrenceSv√∏mmer(Medlem nytMedlem) {
        opretTr√¶nere();
        System.out.println("Du er nu i gang med at oprette en konkurrence sv√∏mmer!");
        String sv√∏mmeDisciplinSomOrd = sv√∏mmeDisciplinSomOrd();

        double bedsteTid = 0;
        LocalDate dato = LocalDate.now();

        String jaEllerNej;
        do {
            System.out.println("Har medlemmet en bedste tid? (ja/nej)");
            jaEllerNej = scanner.nextLine();

            if (!jaEllerNej.equalsIgnoreCase("ja") && !jaEllerNej.equalsIgnoreCase("nej")) {
                System.out.println("Ugyldigt svar. Skriv enten 'ja' eller 'nej'. Pr√∏v igen.");
            }
        } while (!jaEllerNej.equalsIgnoreCase("ja") && !jaEllerNej.equalsIgnoreCase("nej"));

        if (jaEllerNej.equalsIgnoreCase("ja")) {
            try {
                System.out.println("Hvad er medlemmets bedste tid? (mm,ss)");
                bedsteTid = indtastGyldigTid();

                System.out.println("Hvilken dato havde medlemmet sin bedste tid? (format: dd-MM-yyyy)");
                String datoStr = scanner.nextLine();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                dato = LocalDate.parse(datoStr, formatter);
            } catch (InputMismatchException | DateTimeParseException e) {
                System.out.println("Ugyldig tid eller dato. Pr√∏v igen.");
                opretKonkurrenceSv√∏mmer(nytMedlem);
                return;
            }
        }

        System.out.println("Har medlemmet v√¶ret til et st√¶vne? (ja/nej)");
        String st√¶vneJaEllerNej = scanner.nextLine();

        String st√¶vneNavn = "Medlem har ikke deltaget i et st√¶vne";
        double st√¶vneTid = 0;
        int placering = 0;

        if (st√¶vneJaEllerNej.equalsIgnoreCase("ja")) {
            System.out.println("Indtast st√¶vne-navn: ");
            st√¶vneNavn = scanner.nextLine();

            boolean validtInput = false;

            do {
                try {
                    System.out.println("Indtast tid: (mm,ss)");
                    st√¶vneTid = indtastGyldigTid();
                    validtInput = true;
                } catch (InputMismatchException e) {
                    System.out.println("Ugyldigt svar. Pr√∏v igen.");
                }
            } while (!validtInput);

            do {
                validtInput = false;
                try {
                    System.out.println("Indtast din placering: ");
                    placering = scanner.nextInt();
                    scanner.nextLine();
                    validtInput = true;
                } catch (InputMismatchException e) {
                    System.out.println("Ugyldigt svar. Pr√∏v igen.");
                    scanner.nextLine();
                }
            } while (!validtInput);
        }

        Konkurrencesv√∏mmer konkurrencesv√∏mmer = new Konkurrencesv√∏mmer(nytMedlem.getNavn(), nytMedlem.getF√∏dsels√•r(),
                nytMedlem.getAktivEllerPassiv(), nytMedlem.getErKontingentBetalt(),
                // nytMedlem.getMotionistEllerKonkurrence(), sv√∏mmeDisciplinSomOrd, bedsteTid, dato);
                nytMedlem.getMotionistEllerKonkurrence(), sv√∏mmeDisciplinSomOrd, bedsteTid, dato, st√¶vneNavn, st√¶vneTid, placering);
        hvilkenTr√¶nerSkalMedlemmetHave(konkurrencesv√∏mmer);
        konkurrenceMedlemmer.add(konkurrencesv√∏mmer);
        filer.gemKonkurrenceTilFil(konkurrenceMedlemmer, "konkurrencesv√∏mmere.txt");
        System.out.println("Medlem oprettet: " + konkurrencesv√∏mmer);

    }

    public double indtastGyldigTid() throws InputMismatchException {
        return konkurrencesv√∏mmer.indtastGyldigTid();
    }

    public String aktivEllerPassivSomOrd() { // MEDLEMS KLASSEN
        return medlem.aktivEllerPassivSomOrd();
    }

    public String erKontingentBetaltSomOrd() { // MEDLEMS KLASSEN
        return medlem.erKontingentBetaltSomOrd();
    }

    public String erKontingentBetaltSomOrd(Medlem medlem) { // MEDLEMS KLASSEN
        return medlem.erKontingentBetaltSomOrd(medlem);
    }


    public String motionistEllerKonkurrenceSomOrd() { // MEDLEMS KLASSEN
        return medlem.motionistEllerKonkurrenceSomOrd();
    }


    public String sv√∏mmeDisciplinSomOrd() { // KONKURRENCESV√òMMER KLASSEN
        return konkurrencesv√∏mmer.sv√∏mmeDisciplinSomOrd();
    }

    public void seMedlemmer() { // MEDLEMS KLASSEN
        medlem.seMedlemmer(motionistMedlemmer, konkurrenceMedlemmer);
    }

    public void seMedlemmerBetalt() { // BETALINGS KLASSEN
        betaling.seMedlemmerBetalt(motionistMedlemmer, konkurrenceMedlemmer);

    }

    public void seMedlemmerRestance() { // BETALINGS KLASSEN
        betaling.seMedlemmerRestance(motionistMedlemmer, konkurrenceMedlemmer);

    }





    public void seTop5Crawl(){ //NY TARA TODO

    }
    public void seTop5Brystsv√∏mning(){ //NY TARA TODO

    }
    public void seTop5Butterfly(){ //NY TARA TODO

    }


}